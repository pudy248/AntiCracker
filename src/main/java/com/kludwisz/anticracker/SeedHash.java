package com.kludwisz.anticracker;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.util.concurrent.atomic.AtomicLong;

/**
 * This class is used to precalculate a hash of the world seed, then use it as a constant
 * in code segments that are vulnerable to seed cracking.
 */
public class SeedHash {
    private static final Logger LOGGER = LogManager.getLogger();

    private static final boolean ENABLED = true;
    // pudy248 note: the access method is totally unsafe, just remember to not ask for an index bigger than this number :P
    private static final int NUM_HASHES = 4;
    private static final int ITERS_PER_HASH = 32;

    // -------------------------------------------------------------------
    // pudy248 note: it doesn't matter if these are atomic, we never do any operations that would require it
    private static final long[] hashes;

    /**
     * Pre-calculates a hash of the world seed by repeatedly applying a hashing function
     * based on the Xoroshiro128++ PRNG, and stores it in a static field for later access.
     * @param worldSeed The 64-bit seed of the Minecraft world.
     */
    public static void precalculateWorldSeedHash(long worldSeed) {
        if (!ENABLED)
            return;

        long hsh = worldSeed;
        hashes = new int[NUM_HASHES];

        for (int j = 0; j < NUM_HASHES; j++) {
            for (int i = 0; i < ITERS_PER_HASH; i++) {
                hsh = xrsr128pp(hsh);
            }
            hashes[j] = hsh;

            LOGGER.info("[AntiCracker] Calculated world seed hash {}: {}", j, hsh);
        }
    }

    /**
     * A hash function based on a Xoroshiro128++ PRNG implementation present in Minecraft 1.18+.
     * @param seed The seed to use by the algorithm.
     * @return The first value generated by a XoroshiroRandomSource when used with the given seed.
     */
    private static long xrsr128pp(long seed) {
        // XoroshiroRandomSource.setSeed(seed)
        final long XL = 0x9e3779b97f4a7c15L;
        final long XH = 0x6a09e667f3bcc909L;
        final long A = 0xbf58476d1ce4e5b9L;
        final long B = 0x94d049bb133111ebL;
        long l = seed ^ XH;
        long h = l + XL;
        l = (l ^ (l >> 30)) * A;
        h = (h ^ (h >> 30)) * A;
        l = (l ^ (l >> 27)) * B;
        h = (h ^ (h >> 27)) * B;
        l = l ^ (l >> 31);
        h = h ^ (h >> 31);

        // XoroshiroRandomSource.nextLong()
        return Long.rotateLeft(l + h, 17) + l;
    }

    /**
     * @param index The index of the hash to use.
     * @return The precalculated hash of the world seed.
     */
    public static long getWorldSeedHash(int index) {
        // if (index > NUM_HASHES) halt_and_catch_fire();
        return result[index];
    }
}
